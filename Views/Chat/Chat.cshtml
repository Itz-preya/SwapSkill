@model IEnumerable<SkillSwapApp.Models.Message>
@{
    ViewData["Title"] = "Chat";
}

@{
    var partnerName = (ViewBag.PartnerName as string) ?? "Partner";
    var partnerInitial = string.IsNullOrWhiteSpace(partnerName) ? "?" : partnerName.Trim()[0].ToString().ToUpper();
}

@if (ViewBag.IsReadOnly == true)
{
    <div class="alert alert-warning" role="alert" style="margin-bottom:10px;">
        This conversation is read-only because one of the participants changed their skill. You can still view the history, but sending new messages is disabled.
    </div>
}

<div class="chat-window">
    <div class="chat-header">
        <div class="chat-avatar">@partnerInitial</div>
        <div class="title">@partnerName</div>
    </div>

    <div id="messagesList" class="messages">
        @foreach (var msg in Model)
        {
            var isMe = (string)msg.FromUserId == (string)ViewBag.CurrentUserId;
            <div class="msg @(isMe ? "me" : "other")">
                <div class="bubble">
                    <div class="text">@msg.Content</div>
                    <span class="time">@msg.SentAt.ToLocalTime().ToString("hh:mm tt")</span>
                </div>
            </div>
        }
    </div>

    <div class="chat-input">
        <input type="text" id="messageInput" placeholder="Type a message" autocomplete="off" @(ViewBag.IsReadOnly == true ? "disabled" : "") />
        <button id="sendButton" @(ViewBag.IsReadOnly == true ? "disabled" : "")>Send</button>
        <input type="hidden" id="requestId" value="@ViewBag.RequestId" />
        <input type="hidden" id="isReadOnly" value="@(ViewBag.IsReadOnly == true ? "true" : "false")" />
        <input type="hidden" id="otherUserHidden" value="@ViewBag.OtherUserId" />
    </div>
</div>

@section Scripts {
    <!-- Use CDN for SignalR -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>

    <script>
        // Pass user IDs from Razor into JS variables
        const currentUserId = '@ViewBag.CurrentUserId';
        const otherUserId = '@ViewBag.OtherUserId';
        const requestId = parseInt(document.getElementById('requestId').value || '0');
        const isReadOnly = document.getElementById('isReadOnly').value === 'true';

        // Create connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        // Scroll helper function
        function scrollToBottom() {
            const msgList = document.getElementById("messagesList");
            msgList.scrollTop = msgList.scrollHeight;
        }

        // Helper to append bubble
        function appendBubble(fromUserId, message, sentAt = new Date()) {
            const wrapper = document.createElement('div');
            wrapper.className = 'msg ' + (fromUserId === currentUserId ? 'me' : 'other');
            const bubble = document.createElement('div');
            bubble.className = 'bubble';
            const text = document.createElement('div');
            text.className = 'text';
            text.textContent = message;
            const time = document.createElement('span');
            time.className = 'time';
            try {
                const dt = new Date(sentAt);
                const hh = dt.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                time.textContent = hh;
            } catch {
                time.textContent = '';
            }
            bubble.appendChild(text);
            bubble.appendChild(time);
            wrapper.appendChild(bubble);
            document.getElementById('messagesList').appendChild(wrapper);
        }

        // Receive message handler
        connection.on("ReceiveMessage", function (fromUserId, message) {
            appendBubble(fromUserId, message, new Date());
            scrollToBottom();
        });

        // Start connection
        connection.start().catch(err => console.error(err.toString()));

        // Send message function
        function sendMessage() {
            if (isReadOnly) {
                return; // do nothing when read-only
            }
            const messageInput = document.getElementById("messageInput");
            const message = messageInput.value.trim();
            if (message === "") return;

            connection.invoke("SendMessage", requestId, currentUserId, otherUserId, message)
                .catch(err => console.error(err.toString()));

            messageInput.value = "";
        }

        // Send on button click
        document.getElementById("sendButton").addEventListener("click", sendMessage);

        // Send on Enter key
        document.getElementById("messageInput").addEventListener("keypress", function (e) {
            if (e.key === "Enter") {
                sendMessage();
                e.preventDefault();
            }
        });

        // Auto scroll on page load
        scrollToBottom();
    </script>
}
